{"version":3,"sources":["webpack:///src/app/pages/storage/storage.page.html","webpack:///src/app/pages/storage/storage-routing.module.ts","webpack:///src/app/pages/storage/storage.module.ts","webpack:///src/app/pages/storage/storage.page.scss","webpack:///src/app/pages/storage/storage.page.ts","webpack:///src/app/services/camera/camera.service.ts","webpack:///src/app/utils/mime-type.ts"],"names":["routes","path","component","StoragePageRoutingModule","imports","forChild","exports","StoragePageModule","declarations","StoragePage","proofRepository","cameraService","collectorService","proofs$","getAll$","proofsWithRaw$","pipe","proofs","map","proof","getRawFile$","base64Strings","index","rawBase64","refresh$","subscribe","event","target","complete","capture$","cameraPhoto","storeAndCollect","base64String","format","checkProperties","selector","template","Camera","CameraService","getPhoto","resultType","Base64","source","quality","allowEditing","providedIn","fromExtension","extension","JPEG","PNG","Error","type"],"mappings":"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","file":"pages-storage-storage-module-es5.js","sourcesContent":["export default \"<ion-header>\\n  <ion-toolbar>\\n    <ion-buttons slot=\\\"primary\\\">\\n      <ion-button routerLink=\\\"/settings\\\">\\n        <ion-icon slot=\\\"icon-only\\\" name=\\\"settings\\\"></ion-icon>\\n      </ion-button>\\n    </ion-buttons>\\n    <ion-title>{{ 'capture' | translate }}</ion-title>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-content>\\n\\n  <ion-refresher slot=\\\"fixed\\\" (ionRefresh)=\\\"refresh($event)\\\">\\n    <ion-refresher-content></ion-refresher-content>\\n  </ion-refresher>\\n\\n  <ion-grid>\\n    <ion-row>\\n      <ion-col *ngFor=\\\"let proofWithRaw of proofsWithRaw$ | async\\\"\\n        [routerLink]=\\\"['/proof', {hash: proofWithRaw.proof.hash}]\\\" size=\\\"3\\\" class=\\\"ion-no-padding\\\">\\n        <ion-card>\\n          <ion-thumbnail>\\n            <ion-img [src]=\\\"'data:image/*;base64,' + proofWithRaw.rawBase64\\\"></ion-img>\\n          </ion-thumbnail>\\n        </ion-card>\\n      </ion-col>\\n    </ion-row>\\n  </ion-grid>\\n\\n  <ion-fab horizontal=\\\"end\\\" vertical=\\\"bottom\\\" slot=\\\"fixed\\\">\\n    <ion-fab-button (click)=\\\"capture()\\\">\\n      <ion-icon name=\\\"camera\\\"></ion-icon>\\n    </ion-fab-button>\\n  </ion-fab>\\n\\n</ion-content>\";","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { StoragePage } from './storage.page';\n\nconst routes: Routes = [{\n  path: '',\n  component: StoragePage,\n}];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class StoragePageRoutingModule { }\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { IonicModule } from '@ionic/angular';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { StoragePageRoutingModule } from './storage-routing.module';\nimport { StoragePage } from './storage.page';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    StoragePageRoutingModule,\n    TranslateModule\n  ],\n  declarations: [StoragePage]\n})\nexport class StoragePageModule { }\n","export default \"ion-thumbnail {\\n  --size: 25vw;\\n}\\n\\nion-card {\\n  margin: calc(var(--ion-padding, 16px) / 4);\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3JrL2NhcHR1cmUtbGl0ZS9jYXB0dXJlLWxpdGUvc3JjL2FwcC9wYWdlcy9zdG9yYWdlL3N0b3JhZ2UucGFnZS5zY3NzIiwic3JjL2FwcC9wYWdlcy9zdG9yYWdlL3N0b3JhZ2UucGFnZS5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsWUFBQTtBQ0NGOztBREVBO0VBQ0UsMENBQUE7QUNDRiIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL3N0b3JhZ2Uvc3RvcmFnZS5wYWdlLnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyJpb24tdGh1bWJuYWlsIHtcbiAgLS1zaXplOiAyNXZ3O1xufVxuXG5pb24tY2FyZCB7XG4gIG1hcmdpbjogY2FsYyh2YXIoLS1pb24tcGFkZGluZywgMTZweCkgLyA0KTtcbn1cbiIsImlvbi10aHVtYm5haWwge1xuICAtLXNpemU6IDI1dnc7XG59XG5cbmlvbi1jYXJkIHtcbiAgbWFyZ2luOiBjYWxjKHZhcigtLWlvbi1wYWRkaW5nLCAxNnB4KSAvIDQpO1xufSJdfQ== */\";","import { Component } from '@angular/core';\nimport { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';\nimport { forkJoin, of, zip } from 'rxjs';\nimport { concatMap, defaultIfEmpty, map, mapTo, switchMap } from 'rxjs/operators';\nimport { CameraService } from 'src/app/services/camera/camera.service';\nimport { CollectorService } from 'src/app/services/collector/collector.service';\nimport { ProofRepository } from 'src/app/services/data/proof/proof-repository.service';\nimport { fromExtension } from 'src/app/utils/mime-type';\n\n@UntilDestroy({ checkProperties: true })\n@Component({\n  selector: 'app-storage',\n  templateUrl: 'storage.page.html',\n  styleUrls: ['storage.page.scss'],\n})\nexport class StoragePage {\n\n  private readonly proofs$ = this.proofRepository.getAll$();\n  readonly proofsWithRaw$ = this.proofs$.pipe(\n    concatMap(proofs => forkJoin(proofs.map(proof => this.proofRepository.getRawFile$(proof))).pipe(defaultIfEmpty([] as string[]))),\n    switchMap(base64Strings => zip(this.proofs$, of(base64Strings))),\n    map(([proofs, base64Strings]) => proofs.map((proof, index) => ({\n      proof,\n      rawBase64: base64Strings[index]\n    })))\n  );\n\n  constructor(\n    private readonly proofRepository: ProofRepository,\n    private readonly cameraService: CameraService,\n    private readonly collectorService: CollectorService\n  ) { }\n\n  ionViewWillEnter() {\n    this.proofRepository.refresh$().pipe(\n      untilDestroyed(this)\n    ).subscribe();\n  }\n\n  refresh(event: any) {\n    this.proofRepository.refresh$().pipe(\n      mapTo(event.target.complete()),\n      untilDestroyed(this)\n    ).subscribe();\n  }\n\n  capture() {\n    this.cameraService.capture$().pipe(\n      map(cameraPhoto => this.collectorService.storeAndCollect(\n        cameraPhoto.base64String,\n        fromExtension(cameraPhoto.format)\n      )),\n      untilDestroyed(this)\n    ).subscribe();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CameraResultType, CameraSource, Plugins } from '@capacitor/core';\nimport { defer } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nconst { Camera } = Plugins;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CameraService {\n\n  capture$() {\n    return defer(() => Camera.getPhoto({\n      resultType: CameraResultType.Base64,\n      source: CameraSource.Camera,\n      quality: 100,\n      allowEditing: false\n    })).pipe(\n      map(cameraPhoto => ({\n        format: cameraPhoto.format,\n        // tslint:disable-next-line: no-non-null-assertion\n        base64String: cameraPhoto.base64String!\n      }))\n    );\n  }\n}\n","export interface MimeType {\n  readonly type: string;\n  readonly extension: string;\n}\n\nexport function fromExtension(extension: string) {\n  switch (extension) {\n    case 'jpeg':\n    case 'jpg':\n      return JPEG;\n\n    case 'png':\n      return PNG;\n\n    default:\n      throw new Error('Unknown extension.');\n  }\n}\n\nexport const JPEG: MimeType = {\n  type: 'image/jpeg',\n  extension: 'jpg'\n};\n\nexport const PNG: MimeType = {\n  type: 'image/png',\n  extension: 'png'\n};\n"]}