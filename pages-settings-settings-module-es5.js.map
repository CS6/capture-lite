{"version":3,"sources":["webpack:///src/app/pages/settings/settings.page.html","webpack:///src/app/pages/settings/settings-routing.module.ts","webpack:///src/app/pages/settings/settings.module.ts","webpack:///src/app/pages/settings/settings.page.scss","webpack:///src/app/pages/settings/settings.page.ts"],"names":["routes","path","component","SettingsPageRoutingModule","imports","forChild","exports","SettingsPageModule","declarations","Device","SettingsPage","languageService","langauges","languages","currentLanguageKey$","publicKey$","getPublicKey$","privateKey$","getPrivateKey$","version$","getInfo","pipe","deviceInfo","appVersion","languageKey","setCurrentLanguage$","subscribe","checkProperties","selector","template"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;AAAe;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACKf,QAAMA,MAAM,GAAW,CACrB;AACEC,UAAI,EAAE,EADR;AAEEC,eAAS,EAAE;AAFb,KADqB,CAAvB;;AAWA,QAAaC,yBAAyB;AAAA;AAAA,KAAtC;;AAAaA,6BAAyB,6DAJrC,+DAAS;AACRC,aAAO,EAAE,CAAC,6DAAaC,QAAb,CAAsBL,MAAtB,CAAD,CADD;AAERM,aAAO,EAAE,CAAC,4DAAD;AAFD,KAAT,CAIqC,GAAzBH,yBAAyB,CAAzB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACEb,QAAaI,kBAAkB;AAAA;AAAA,KAA/B;;AAAaA,sBAAkB,6DAV9B,+DAAS;AACRH,aAAO,EAAE,CACP,4DADO,EAEP,0DAFO,EAGP,0DAHO,EAIP,kFAJO,EAKP,iEALO,CADD;AAQRI,kBAAY,EAAE,CAAC,2DAAD;AARN,KAAT,CAU8B,GAAlBD,kBAAkB,CAAlB;;;;;;;;;;;;;;;;AClBb;AAAe;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;QCQPE,M,GAAW,uD,CAAXA,M;;AAQR,QAAaC,YAAY;AAWvB,4BACmBC,eADnB,EACmD;AAAA;;AAAhC,aAAAA,eAAA,GAAAA,eAAA;AAVV,aAAAC,SAAA,GAAY,KAAKD,eAAL,CAAqBE,SAAjC;AACA,aAAAC,mBAAA,GAAsB,KAAKH,eAAL,CAAqBG,mBAA3C;AACA,aAAAC,UAAA,GAAa,gIAAyBC,aAAzB,EAAb;AACA,aAAAC,WAAA,GAAc,gIAAyBC,cAAzB,EAAd;AACA,aAAAC,QAAA,GAAW,mDAAM;AAAA,iBAAMV,MAAM,CAACW,OAAP,EAAN;AAAA,SAAN,EAA8BC,IAA9B,CAClB,8DADkB,EAElB,2DAAI,UAAAC,UAAU;AAAA,iBAAIA,UAAU,CAACC,UAAf;AAAA,SAAd,CAFkB,CAAX;AAOJ;;AAbkB;AAAA;AAAA,2CAeJC,WAfI,EAeiB;AACtC,eAAKb,eAAL,CAAqBc,mBAArB,CAAyCD,WAAzC,EAAsDH,IAAtD,CACE,6EAAe,IAAf,CADF,EAEEK,SAFF;AAGD;AAnBsB;;AAAA;AAAA,OAAzB;;;;cAYsC;;;;AAZzBhB,gBAAY,6DANxB,2EAAa;AAAEiB,qBAAe,EAAE;AAAnB,KAAb,CAMwB,EALxB,gEAAU;AACTC,cAAQ,EAAE,cADD;AAETC,cAAQ,EAAR;AAAA;AAAA,sGAFS;;;;AAAA,KAAV,CAKwB,GAAZnB,YAAY,CAAZ","file":"pages-settings-settings-module-es5.js","sourcesContent":["export default \"<ion-header *transloco=\\\"let t\\\">\\n  <ion-toolbar>\\n    <ion-buttons slot=\\\"start\\\">\\n      <ion-button routerLink=\\\"..\\\" routerDirection=\\\"back\\\">\\n        <ion-icon slot=\\\"icon-only\\\" name=\\\"arrow-back\\\"></ion-icon>\\n      </ion-button>\\n    </ion-buttons>\\n    <ion-title>{{ t('settings') }}</ion-title>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-content *transloco=\\\"let t\\\">\\n  <ion-list>\\n    <ion-list-header>{{ t('general') }}</ion-list-header>\\n    <ion-item>\\n      <ion-icon name=\\\"language\\\" slot=\\\"start\\\"></ion-icon>\\n      <ion-label>{{ t('languages') }}</ion-label>\\n      <ion-select [ngModel]=\\\"currentLanguageKey$ | async\\\" (ngModelChange)=\\\"setCurrentLanguage($event)\\\">\\n        <ion-select-option *ngFor=\\\"let language of langauges | keyvalue\\\" [value]=\\\"language.key\\\">{{ language.value }}\\n        </ion-select-option>\\n      </ion-select>\\n    </ion-item>\\n    <ion-list-header>{{ t('defaultSignature') }}</ion-list-header>\\n    <ion-item>\\n      <ion-icon name=\\\"key\\\" slot=\\\"start\\\"></ion-icon>\\n      <ion-label class=\\\"ion-text-wrap\\\">\\n        <h2>{{ t('publicKey') }}</h2>\\n        <p>{{ publicKey$ | async }}</p>\\n      </ion-label>\\n    </ion-item>\\n    <ion-item>\\n      <ion-icon name=\\\"key\\\" slot=\\\"start\\\"></ion-icon>\\n      <ion-label class=\\\"ion-text-wrap\\\">\\n        <h2>{{ t('privateKey') }}</h2>\\n        <p>{{ privateKey$ | async }}</p>\\n      </ion-label>\\n    </ion-item>\\n    <ion-list-header>{{ t('about') }}</ion-list-header>\\n    <ion-item>\\n      <ion-icon name=\\\"information\\\" slot=\\\"start\\\"></ion-icon>\\n      <ion-label>\\n        <h2>{{ t('version') }}</h2>\\n        <p>{{ version$ | async }}</p>\\n      </ion-label>\\n    </ion-item>\\n  </ion-list>\\n</ion-content>\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { SettingsPage } from './settings.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: SettingsPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class SettingsPageRoutingModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { IonicModule } from '@ionic/angular';\nimport { TranslocoModule } from '@ngneat/transloco';\nimport { SettingsPageRoutingModule } from './settings-routing.module';\nimport { SettingsPage } from './settings.page';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    SettingsPageRoutingModule,\n    TranslocoModule\n  ],\n  declarations: [SettingsPage]\n})\nexport class SettingsPageModule { }\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL3NldHRpbmdzL3NldHRpbmdzLnBhZ2Uuc2NzcyJ9 */\";","import { Component } from '@angular/core';\nimport { Plugins } from '@capacitor/core';\nimport { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';\nimport { defer } from 'rxjs';\nimport { first, map } from 'rxjs/operators';\nimport { DefaultSignatureProvider } from 'src/app/services/collector/signature/default-provider/default-provider';\nimport { LanguageService } from 'src/app/services/language/language.service';\n\nconst { Device } = Plugins;\n\n@UntilDestroy({ checkProperties: true })\n@Component({\n  selector: 'app-settings',\n  templateUrl: './settings.page.html',\n  styleUrls: ['./settings.page.scss'],\n})\nexport class SettingsPage {\n\n  readonly langauges = this.languageService.languages;\n  readonly currentLanguageKey$ = this.languageService.currentLanguageKey$;\n  readonly publicKey$ = DefaultSignatureProvider.getPublicKey$();\n  readonly privateKey$ = DefaultSignatureProvider.getPrivateKey$();\n  readonly version$ = defer(() => Device.getInfo()).pipe(\n    first(),\n    map(deviceInfo => deviceInfo.appVersion)\n  );\n\n  constructor(\n    private readonly languageService: LanguageService\n  ) { }\n\n  setCurrentLanguage(languageKey: string) {\n    this.languageService.setCurrentLanguage$(languageKey).pipe(\n      untilDestroyed(this)\n    ).subscribe();\n  }\n}\n"]}